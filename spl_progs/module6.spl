//print("called");
alias functionNum R1;
//alias pid R2;

//swapout
if(functionNum==1) then
		[SYSTEM_STATUS_TABLE+5]=R2;


		//choose process to swap out
		R5=3;
		R6=-1;
		R7=-1;
		R9=-1;
		R10=-1;

		while(R5<16) do
				R8=PROCESS_TABLE+R5*16+4;
				if([R8+2]==1) then
						R5=R5+1;
						continue;
				endif;
				if([R8]==4 || [R8]==12 ) then
					R5=R5+1;
						continue;
				endif;
				if([R8]==WAIT_PROCESS ) then
					R6=R5;
					break;
				endif;

				if([R8]==WAIT_TERMINAL) then
					R7=R5;
				endif;

				if([R8]!=RUNNING && [R8+2]==0) then
					if([R8-4]>R10) then
							R10=[R8-4];
							R9=R5;
					endif;
				endif;

				R5=R5+1;
		endwhile;

		if(R6==-1) then
				R6=R7;
	      if(R7==-1) then
		      	R6=R9;
        endif;
		endif;

		R5=R6;
		alias process R5;
	//	print("from-1-R5=");
 	// print(R5);
//print("k stack of");
//print(R5);
//print("is");
//print([PROCESS_TABLE+16*R5+11]);
//print("state is");
//print([PROCESS_TABLE+16*R5+4]);
		//reset tick of selected process
	  	[PROCESS_TABLE+process*16]=0;

		//pagetable
	  R6=4;
	  while(R6<20) do
		 		R7=PAGE_TABLE_BASE+process*20+R6;

				if([R7]!=-1 && [MEMORY_FREE_LIST+[R7]]<=1 && (R6<8 || R6>15)) then
						//invoke get swap block
			  		multipush(R5,R6,R7);
			  		R1=6;
			  		call MOD_2;
			  		multipop(R5,R6,R7);

			  		[DISK_MAP_TABLE+process*10+R6/2]=R0;

						//INVOKE disk store
			  		multipush(R5,R6,R7);
			  		R1=1;
			  		R2=[SYSTEM_STATUS_TABLE+1];
//print("R7 is");
//print([R7]);
			  		R3=[R7];
			  		R4=R0;
			  		call MOD_4;
			  		multipop(R5,R6,R7);

		 		endif;


		 		if(R6>7 || (R6<=7 && [MEMORY_FREE_LIST+[R7]]<=1)) then
			   		//invoke release page
			  		multipush(R5,R6,R7);
			  		R1=2;
			  		R2=[R7];
			  		call MOD_2;
			  		multipop(R5,R6,R7);
			  		[R7]=-1;
			  		[R7+1]="0000";
		 		endif;

		 		R6=R6+2;
	   endwhile;


	  // kernel stack
  // print("from-2-R5=");
	// print(R5);
	    	R6=[PROCESS_TABLE+R5*16+11];


	    	//invoke get swap block
	      multipush(R5,R6,R7);
	      R1=6;
	      call MOD_2;
	      multipop(R5,R6,R7);

	      [DISK_MAP_TABLE+process*10]=R0;
//print("R6 is");
//print(R6);
				//INVOKE disk store
			  multipush(R5,R6,R7);
			  R1=1;
			  R2=[SYSTEM_STATUS_TABLE+1];
			  R3=R6;
			  R4=R0;
			  call MOD_4;
			  multipop(R5,R6,R7);

				//invoke release page
			  multipush(R5,R6,R7);
			  R1=2;
			  R2=R6;
			  call MOD_2;
			  multipop(R5,R6,R7);

 				[PROCESS_TABLE+process*16+11]=-1;

				//set swap flag
				[PROCESS_TABLE+process*16+6]=1;

				//set sys table
	   		[SYSTEM_STATUS_TABLE+4]=[SYSTEM_STATUS_TABLE+4]+1;
	   		[SYSTEM_STATUS_TABLE+5]=-1;

	return;
endif;


//swap in

if(functionNum==2) then
//print("swap in is called");
//if any process wait for mem or no process in swapped state
if([SYSTEM_STATUS_TABLE+4]==0 || [SYSTEM_STATUS_TABLE+3]!=0) then
 return;
endif;
//print("swapin t2");
//set paging status
[SYSTEM_STATUS_TABLE+5]=[SYSTEM_STATUS_TABLE+1];
//find process to swap in
R1=0;
R5=-1;
while(R1<16) do
	if([PROCESS_TABLE+R1*16+6]==1 && [PROCESS_TABLE+R1*16+6]==READY) then
		if([PROCESS_TABLE+R1*16]>R5) then
			R5=[PROCESS_TABLE+R1*16];
			R6=R1;
		endif;
	endif;
R1=R1+1;
endwhile;
if(R5==-1) then
	[SYSTEM_STATUS_TABLE+5]=-1;
	return;
endif;
[30192]=[30192]+1;
//reset tick
  [PROCESS_TABLE+16*R6]=0;
//PAGETABLE
R5=0;
while(R5<10) do
	if([DISK_MAP_TABLE+R6*10+R5]!=-1) then
		//invoke get fre page
		  multipush(R5,R6);
		  R1=1;
		  call MOD_2;
		  multipop(R5,R6);
		//invoke disk load
		  multipush(R5,R6,R0);
		  R1=2;
		  R2=[SYSTEM_STATUS_TABLE+1];
		  R3=R0;
		  R4=[DISK_MAP_TABLE+R6*10+R5];
		  call MOD_4;
		  multipop(R5,R6,R0);
		//release block
		  multipush(R5,R6,R0);
		  R1=4;
		  R2=[DISK_MAP_TABLE+R6*10+R5];
		  R3=[SYSTEM_STATUS_TABLE+1];
		  call MOD_2;
		  multipop(R5,R6,R0);
		  //invalidate
		  [DISK_MAP_TABLE+R6*10+R5]=-1;
		  if(R5!=0) then
			//print("from swap in-r0");
			//print(R0);
			  [PAGE_TABLE_BASE+20*R6+2*R5]=R0;
			  [PAGE_TABLE_BASE+20*R6+2*R5+1]="0110";
		  else
			 //print("from swap in-r0");
			 //print(R0);
			  [PROCESS_TABLE+R6*16+11]=R0;
		  endif;
	endif;
	if(R5==4) then
		R5=8;
	else
		R5=R5+1;
	endif;
endwhile;





//SWAP FLAG
[PROCESS_TABLE+R6*16+6]=0;
[SYSTEM_STATUS_TABLE+4]=[SYSTEM_STATUS_TABLE+4]-1;
   [SYSTEM_STATUS_TABLE+5]=-1;
return;
endif;
