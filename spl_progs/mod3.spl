alias functionNum R1;

if((functionNum == 1) || (functionNum == 2)) then
	R5 = R2 % 4;
	multipush(R1,R2,R3,R4,R5);
	R1 = 1;
	R2 = R5;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);
	R10 = BUFFER_TABLE + (4*R5); 
	if(([R10] != -1) && ([R10] != R2)) then
		print "usedbl";
		if([R10 + 1] == 1) then
			print "dirty";
			multipush(R1,R2,R3,R4,R5,R10);
			R1 = 1;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = 71 + R5;
			R4 = [R10];
			call MOD_4;
			multipop(R1,R2,R3,R4,R5,R10);
			[R10 + 1] = 0;
		endif;
		multipush(R1,R2,R3,R4,R5,R10);
		R1 = 2;
		R4 = R2;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = 71 + R5;
		call MOD_4;
		multipop(R1,R2,R3,R4,R5,R10);
		[R10] = R2;
	endif;
	if([R10] == -1) then
		print "fstuse";
		multipush(R1,R2,R3,R4,R5,R10);
		R1 = 2;
		R4 = R2;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = 71 + R5;
		call MOD_4;
		multipop(R1,R2,R3,R4,R5,R10);
		[R10] = R2;
	endif;
	if(functionNum == 2) then
		[R4] = [((71 + R5) * 512) + R3];
	else
		[((71 + R5) * 512) + R3] = R4;
		[R10 + 1] = 1;	
	endif;	
	multipush(R1,R2,R3,R4,R5,R10);
	R1 = 2;
	R2 = R5;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R10);
	return;
endif;

if(functionNum == 3) then
	print "mod3";
	R3 = 0;
	while(R3 < 60) do
		if([INODE_TABLE + (R3*16) + 1] == R2) then
			break;
		endif;
		R3 = R3 + 1;
	endwhile;
	if(R3 == 60) then
		R0 = -1;
		return;
	endif;
	multipush(R1,R2,R3);
	R1 = 4;
	R2 = R3;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3);
	print "acinode";
	if(R0 == -1) then
		return;
	endif;
	if(([INODE_TABLE + (R3*16) + 1] != R2) || ([INODE_TABLE + (R3*16)] == EXEC)) then
		multipush(R1,R2,R3);
		R1 = 5;
		R2 = R3;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		multipop(R1,R2,R3);
		R0 = -1;
		return;
	endif;
	R4 = 0;
	while(R4 < 32) do
		if([OPEN_FILE_TABLE + (R4*4)] == -1) then
			break;
		endif;
		R4 = R4 + 1;
	endwhile;
	if(R4 == 32) then
		multipush(R1,R2,R3,R4);
		R1 = 5;
		R2 = R3;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		multipop(R1,R2,R3,R4);
		R0 = -2;
		return;
	endif;
	if(R2 == "root") then
		[OPEN_FILE_TABLE + (R4*4)] = INODE_ROOT;
	else
		print R2;
		if([FILE_STATUS_TABLE + (R3*4) + 1] == -1) then
			[FILE_STATUS_TABLE + (R3*4) + 1] = 1;
		else
			[FILE_STATUS_TABLE + (R3*4) + 1] = [FILE_STATUS_TABLE + (R3*4) + 1] + 1;	
		endif;
		[OPEN_FILE_TABLE + (R4*4)] = R3;
	endif;
	[OPEN_FILE_TABLE + (R4*4) + 1] = 1;
	[OPEN_FILE_TABLE + (R4*4) + 2] = 0;
	multipush(R1,R2,R3,R4);
	R1 = 5;
	R2 = R3;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4);
	print "relinode";
	R0 = R4;
	return;
endif;

if(functionNum == 4) then
	R3 = [OPEN_FILE_TABLE + (4*R2)];
	[OPEN_FILE_TABLE + (4*R2) + 1] = [OPEN_FILE_TABLE + (4*R2) + 1] - 1;
	if([OPEN_FILE_TABLE + (4*R2) + 1] == 0) then
		R4 = 0;
		while(R4 < 3) do
			[OPEN_FILE_TABLE + (4*R2) + R4] = -1;
			R4 = R4 + 1;
		endwhile;
		if([INODE_TABLE + (R3*16) + 1] != "root") then
			[FILE_STATUS_TABLE + (R3*4) + 1] = [FILE_STATUS_TABLE + (R3*4) + 1] - 1;
		endif;
		if([FILE_STATUS_TABLE + (R3*4) + 1] == 0) then
			[FILE_STATUS_TABLE + (R3*4) + 1] = -1;
		endif;
	endif;
	return;
endif;