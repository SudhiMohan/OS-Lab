alias functionNum R1;
if(functionNum == 1) then
	[SYSTEM_STATUS_TABLE + 5] = R2;
	R3 = 3;
	R4 = -1;
	R5 = -1;
	R6 = -1;
	R8 = -1;
	while(R3 < 16) do
		R9 = PROCESS_TABLE + (R3*16);
		if([R9 + 6] == 1) then
			R3 = R3 + 1;
			continue;
		endif;
		if(([R9 + 4] == TERMINATED) || ([R9 + 4] == ALLOCATED)) then
			R3 = R3 + 1;
			continue;
		endif;
		if([R9 + 4] == WAIT_PROCESS) then
			R4 = R3;
			break;
		endif;
		if([R9 + 4] == WAIT_TERMINAL) then
			R5 = R3;
			break;
		endif;
		if(([R9 + 4] != RUNNING) && ([R9 + 6] == 0)) then
			if([R9] > R6) then
				R6 = [R9];
				R8 = R3;
			endif;	
		endif;
		R3 = R3 + 1;
	endwhile;
	R7 = R4;	
	if(R4 == -1) then
		R7 = R5;
		if(R5 == -1) then
			R7 = R8;
			if(R8 == -1) then
				[SYSTEM_STATUS_TABLE + 5] = -1;
				return;
			endif;	
		endif;
	endif;
	[PROCESS_TABLE + (R7*16) + 0] = 0;
	R4 = PAGE_TABLE_BASE + (R7*20);
	R3 = 2;
	while(R3 <= 10) do
			R5 = R4 + (2*R3);
			if((R3 == 10) || ([R5] != -1)) then
				if(((R3 == 2) || (R3 == 3)) && ([MEMORY_FREE_LIST + [R5]] > 1)) then
					R11 = 1;
				else
					if((R3 < 4) || (R3 > 7)) then
						multipush(R3,R4,R5,R7);
						R1 = 6;
						call MOD_2;
						multipop(R3,R4,R5,R7);
						R8 = DISK_MAP_TABLE + (R7*10);
						if(R3 == 10) then
							[R8 + 0] = R0;
						else
							[R8 + R3] = R0;
						endif;
						multipush(R3,R4,R5,R7);
						R1 = 1;
						R2 = [SYSTEM_STATUS_TABLE + 1];
						if(R3 == 10) then
							R3 = [PROCESS_TABLE + (R7*16) + 11];
						else
							R3 = [R5];
						endif;	
						R4 = R0;		
						call MOD_4;
						multipop(R3,R4,R5,R7);
					endif;	
					multipush(R3,R4,R5,R7);
					R1 = 2;
					R2 = [R5];
					call MOD_2;
					multipop(R3,R4,R5,R7);
					if(R3 == 10) then
						[PROCESS_TABLE + (R7*16) + 11] = -1;
					else
						[R5] = -1;
						[R5 + 1] = "0000";
					endif;
				endif;	
			endif;	
			R3 = R3 + 1;
	endwhile;
	[PROCESS_TABLE + (R7*16) + 6] = 1;
	[SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] + 1;
	[SYSTEM_STATUS_TABLE + 5] = -1;
	return;
endif;
if(functionNum == 2) then
	if(([SYSTEM_STATUS_TABLE + 3] == 0) || ([SYSTEM_STATUS_TABLE + 4] == 0)) then
		return;
	endif;
	[SYSTEM_STATUS_TABLE + 5] = R2;
	R3 = 3;
	R5 = -1;
	R6 = -1;
	while(R3 < 16) do
		R4 = PROCESS_TABLE + (R3*16);
		if(([R4 + 4] == READY) && ([R4 + 6] == 1)) then
			if([R4] > R6) then
				R6 = [R4];
				R5 = R3;
			endif;	
		endif;
		R3 = R3 + 1;
	endwhile;
	if(R5 == -1) then
		[SYSTEM_STATUS_TABLE + 5] = -1;
		return;
	endif;
	[PROCESS_TABLE + (R5*16) + 0] = 0;
	R6 = DISK_MAP_TABLE + (R5*10);
	R3 = 2;
	while(R3 <= 10) do
		if((R3 == 10) || (((R3 < 4) || (R3 > 7)) && ([R6 + R3] != -1))) then	
				multipush(R3,R5,R6);
				R1 = 1;
				call MOD_2;
				multipop(R3,R5,R6);
				multipush(R3,R5,R6);
				R1 = 2;
				R2 = [SYSTEM_STATUS_TABLE + 1];
				if(R3 == 10) then
					R4 = [R6 + 0];
				else
					R4 = [R6 + R3];
				endif;
				R3 = R0;
				call MOD_4;
				multipop(R3,R5,R6);
				multipush(R3,R5,R6);
				R1 = 4;
				if(R3 == 10) then
					R2 = [R6 + 0];
				else
					R2 = [R6 + R3];
				endif;
				R3 = [SYSTEM_STATUS_TABLE + 1];
				call MOD_2;
				multipop(R3,R5,R6);
				if(R3 == 10) then
					[PROCESS_TABLE + (R5*16) + 11] = R0;
					[R6 + 0] = -1;
				else
					R4 = PAGE_TABLE_BASE + (R5*20);
					[R4 + (2*R3)] = R0;
					[R4 + (2*R3) + 1] = "0110";
					[R6 + R3] = -1;
				endif;
		endif;	
		R3 = R3 + 1;
	endwhile;
	[PROCESS_TABLE + (R5*16) + 6] = 0;
	[SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] - 1;
	[SYSTEM_STATUS_TABLE + 5] = -1;
	return;
endif;